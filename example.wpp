type int_list = (int *  ptr int_list) + unit
in
append(list : int_list, value : int) : int_list = vars in
	debug_print append_preswitch;
	switch list
	inl x: 
		var head := outl x in
		var tail := *(outr x) in
		debug_print pre_rec;
		tail := append(tail, value);
		debug_print post_rec;
		var tail_p := new tail in
		list := inl <head, tail_p>;
		debug_print append_tail
	inr x:
		var empty := new inr <> in
		list := inl <value, empty>;
		debug_print append_empty
	in return list
in
vars list := new inr <>
in 
var empty := new inr <> in
var list1 := new inl <1, empty> in
var list2_v := inr <> in
debug_print pre_call_main;
list2_v := append(*list1, 2);
var list2 := new list2_v in
debug_print post_call_main;
list := list2


